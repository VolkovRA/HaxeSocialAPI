package social.task;

import haxe.DynamicAccess;

/**
 * Задача получения данных пользователей.
 * 
 * Данная задача может выполняться в несколько запросов, между
 * каждой порцией данных она будет вызывать колбек: `onProgress`.
 * 
 * Вы можете указать маску запрашиваемых данных: `fields`.
 */
interface IGetUsersTask extends ITask<IGetUsersTask> 
{
    /**
     * Список запрошенных пользователей.
     * 
     * По мере выполнения запросов к API пользователи в этом
     * списке будут заполняться данными.
     * 
     * - Список может быть пустым. (length=0)
     * - Список не должен содержать `null`.
     * - Список не должен быть `null`.
     * - Список не гарантирует фильтрацию дубликатов.
     * 
     * Не может быть `null`
     */
    public var users:Array<SocialUser>;

    /**
     * Зарашиваемые данные.
     * 
     * Обратите внимание, что если флаг не указан, то соответствующие
     * данные **не будут** загружены, даже если они придут в ответе от
     * социальной сети. (Необходимо для одинакового поведения везде)
     * 
     * По умолчанию запрашиваются:
     *   - `SocialUserField.FIRST_NAME`  - Имя пользователя.
     *   - `SocialUserField.LAST_NAME`   - Фамилия пользователя.
     *   - `SocialUserField.AVATAR_100`  - Аватарка 100x100.
     *   - `SocialUserField.DELETED`     - Пользователь удалён или никогда не существовал.
     * 
     * По умолчанию: `SocialUserField.FIRST_NAME | SocialUserField.LAST_NAME | SocialUserField.AVATAR_100 | SocialUserField.DELETED`
     */
    public var fields:SocialUserFields;

    /**
     * Приоритет выполнения задачи.
     * 
     * Используется для повышения или понижения приоритета для
     * запросов к социальной сети. Задачи с высоким приоритетом
     * отправят свои запросы раньше остальных.
     * 
     * По умолчанию: `0`
     */
    public var priority:Int;

    /**
     * Количество повторных попыток запроса в случае ошибки.
     * 
     * Если запрос завершился ошибкой, будет произведён повторный
     * запрос указанное количество раз до получения валидного ответа.
     * 
     * При повторном запросе колбеки не вызываются и это
     * происходит в "фоновом" режиме.
     * 
     * По умолчанию: `0` (Не делать повторных попыток)
     */
    public var requestRepeatTry:Int;

    /**
     * Колбек прогресса загрузки.
     * 
     * Если назначен, этот обработчик будет вызываться каждый
     * раз при получении новой порции данных. Если запрос
     * большой, он будет выполняться частями, пока все данные
     * пользователей не будут загружены. С помощью этого колбека
     * вы можете отслеживать уже загруженных пользователей.
     * Вторым параметром передаётся мапа: `id->User` загруженных
     * пользователей социальной сети.
     * 
     * Особенности:
     * - Этот колбек вызывается как минимум один раз.
     * - Этот колбек всегда предшествует вызову `onComplete`.
     * 
     * По умолчанию: `null`
     */
    public var onProgress:IGetUsersTask->DynamicAccess<SocialUser>->Void;
}