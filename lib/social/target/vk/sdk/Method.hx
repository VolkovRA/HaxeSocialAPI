package social.target.vk.sdk;

/**
 * Метод ClientAPI.  
 * Методы Client API позволяют взаимодействовать с пользовательским
 * интерфейсом из приложения — вызывать диалоговые окна, менять размер
 * окна приложения и т.д. Они доступны из IFrame приложений с помощью
 * функции `VK.callMethod()` из Javascript SDK.
 * @see Документация: https://vk.com/dev/clientapi
 */
@:enum abstract Method(String) to String
{
    /**
     * **Параметры**: —  
     * **Ограничения**: не чаще одного вызова в 3 секунды.
     * 
     * Показывает окно с запросом разрешения на установку приложения.  
     * Если пользователь соглашается, вызывается событие `onApplicationAdded`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showInstallBox");
     * ```
     */
    var SHOW_INSTALL_BOX = "showInstallBox";

    /**
     * **Параметры**: settings `Int`  
     * **Ограничения**: не чаще одного вызова в 3 секунды.
     * 
     * Открывает окно с запросом прав доступа для приложения. Параметр `settings`
     *  — это битовая маска запрашиваемых прав доступа. Если `settings = 0`, то
     * пользователю будет предложено разрешить все возможные права доступа.
     * После изменения настроек вызывается событие `onSettingsChanged`. Если
     * пользователь нажал «Отмена» или закрыл окно, генерируется событие `onSettingsCancel`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showSettingsBox", 8214);
     * ```
     * 
     * В нашем примере `settings = 8214 = 2 + 4 + 16 + 8192 = friends, photo, video, wall`.
     * Пользователю будет показано окно с запросом прав доступа к друзьям, фотографиям,
     * видеозаписям и стене.
     */
    var SHOW_SETTINGS_BOX = "showSettingsBox";

    /**
     * **Параметры**: settings `Int`  
     * **Ограничения**: не чаще одного вызова в 3 секунды.
     * 
     * Открывает окно с запросом прав доступа у сообщества для приложения. Параметр
     * `settings` — это битовая маска запрашиваемых прав доступа. Если `settings = 0`, то
     * сообществу будет предложено разрешить все возможные права доступа. После изменения
     * настроек вызывается событие `onGroupSettingsChanged`. Если пользователь нажал
     * «Отмена» или закрыл окно, генерируется событие `onGroupSettingsCancel`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showGroupSettingsBox", 4096);
     * ```
     * 
     * В нашем примере `settings = 4096 = messages`. У сообщества будут запрошены права
     * доступа к сообщениям.
     */
    var SHOW_GROUP_SETTINGS_BOX = "showGroupSettingsBox";

    /**
     * **Параметры**: user_id `Int`, message `String`, requestKey `String`  
     * **Ограничения**: —
     * 
     * Открывает окно отправки запроса пользователю `user_id` (должен быть другом
     * текущего пользователя) с текстом `message` и произвольным дополнительным
     * параметром `requestKey`. С помощью этого метода пользователь может оповестить
     * о событии в приложении своих друзей, даже если у них оно не установлено. При
     * просмотре запроса получателем будут переданы параметры `request_key` и `request_id`.
     * 
     * После действия пользователя может быть вызвано одно из трёх событий:
     * - `onRequestSuccess`
     * - `onRequestCancel`
     * - `onRequestFail`
     * 
     * Пример:
     * ```
     * VK.callMethod("showRequestBox", 123456789, "Hello!", "myRequestKey");
     * ```
     * 
     * В нашем примере запрос с текстом `Hello!` будет отправлен пользователю с id `123456789`.
     */
    var SHOW_REQUEST_BOX = "showRequestBox";

    /**
     * **Параметры**: —  
     * **Ограничения**: —  
     * 
     * Открывает окно для приглашения друзей пользователя в приложение.
     * 
     * Пример:
     * ```
     * VK.callMethod("showInviteBox");
     * ```
     */
    var SHOW_INVITE_BOX = "showInviteBox";

    /**
     * **Параметры**: type `Object`  
     * **Ограничения**: —  
     * 
     * Открывает окно для покупки товара в приложении или ввода голоса на счёт приложения.
     * См. полное описание метода: Диалоговое окно платежей.
     * 
     * @see Диалоговое окно платежа: https://vk.com/dev/payments_dialog
     */
    var SHOW_ORDER_BOX = "showOrderBox";

    /**
     * **Параметры**: photo_hash `String`  
     * **Ограничения**: —  
     * 
     * Открывает окно для подтверждения пользователем изменения фотографии на его странице.
     * Параметр `photo_hash` может быть получен методом `photos.saveOwnerPhoto`. Если
     * пользователь соглашается, вызывается событие `onProfilePhotoSave`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showProfilePhotoBox", "sdf87dfhsdfdfjererhfd9");
     * ```
     */
    var SHOW_PROFILE_PHOTO_BOX = "showProfilePhotoBox";

    /**
     * **Параметры**: width `Int`, height `Int`  
     * **Ограничения**: —  
     * 
     * Инициирует изменение ширины и высоты элемента IFrame. Максимальное значение ширины
     * окна — `1000` px, высоты — `4050`. После изменения размера окна вызывается событие
     * `onWindowResized` с новыми значениями ширины и высоты.
     * 
     * Пример:
     * ```
     * VK.callMethod("resizeWindow", 500, 500);
     * ```
     */
    var RESIZE_WINDOW = "resizeWindow";

    /**
     * **Параметры**: top `Int`, speed `Int`  
     * **Ограничения**: —  
     * 
     * Инициирует скроллинг окна браузера по вертикали. Параметр `top` задает смещение
     * скролла относительно нулевой координаты окна. Например, для того чтобы прокрутить
     * окно на самый верх страницы, необходимо передать значение `0`. Второй параметр
     * `speed` задает скорость анимации в миллисекундах и по умолчанию равен `0`.
     * 
     * Пример:
     * ```
     * VK.callMethod("scrollWindow", 200, 500);
     * ```
     */
    var SCROLL_WINDOW = "scrollWindow";

    /**
     * **Параметры**: title `String`  
     * **Ограничения**: —  
     * 
     * Изменяет заголовок вкладки браузера.
     * 
     * Пример:
     * ```
     * VK.callMethod("setTitle", "New title");
     * ```
     */
    var SET_TITLE = "setTitle";

    /**
     * **Параметры**: location `String`, fireEvent `Bool`  
     * **Ограничения**: —  
     * 
     * Изменяет хеш текущего адреса страницы, который записывается в адресной
     * строке браузера после символа `#`. Используется для поддержки кнопок "назад"
     * и "вперед" в браузере. Параметр `fireEvent` определяет, нужно ли вызывать
     * событие `onLocationChanged` сразу после запуска метода.
     * 
     * Пример:
     * ```
     * VK.callMethod("setLocation", "new_location");
     * ```
     */
    var SET_LOCATION = "setLocation";

    /**
     * **Параметры**: —  
     * **Ограничения**: —  
     * 
     * Вызывает событие `onScrollTop` c четырьмя элементами:
     * - Текущее положение прокрутки окна ВКонтакте.
     * - Высота окна ВКонтакте в браузере.
     * - Отступ от начала страницы до объекта с приложением.
     * - Активна ли текущая вкладка
     * 
     * Пример:
     * ```
     * VK.callMethod("scrollTop");
     * ```
     */
    var SCROLL_TOP = "scrollTop";

    /**
     * **Параметры**: fireEvent `Bool`  
     * **Ограничения**: —  
     * 
     * Вызывает событие `onScroll` с текущим положением прокрутки и высотой окна,
     * после прокрутки страницы пользователем. Параметр `fireEvent` определяет,
     * нужно ли вызывать событие сразу после запуска метода.
     * 
     * Пример:
     * ```
     * VK.callMethod("scrollSubscribe", true);
     * ```
     */
    var SCROLL_SUBSCRIBE = "scrollSubscribe";

    /**
     * **Параметры**: —  
     * **Ограничения**: —  
     * 
     * Вызывает окно для отправки ссылки на мобильную версию игры. После успешной
     * отправки вызывается событие `onInstallPushSuccess`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showInstallPushBox");
     * ```
     */
    var SHOW_INSTALL_PUSH_BOX = "showInstallPushBox";

    /**
     * **Параметры**: group_id `Int`  
     * **Ограничения**: —  
     * 
     * Вызывает окно для разрешения пользователем отправки ему сообщений от имени
     * сообщества. Если передать в методе `id` официальной группы приложения,
     * опубликованного в каталоге, то пользователь увидит окно, предлагающее
     * разрешить отправку ему сообщений от лица этого сообщества.
     * 
     * После разрешения генерируется событие `onAllowMessagesFromCommunity`. Если
     * пользователь нажал «Отмена» или закрыл окно, генерируется событие
     * `onAllowMessagesFromCommunityCancel`.
     * 
     * Пример:
     * ```
     * VK.callMethod("showAllowMessagesFromCommunityBox", group_id);
     * ```
     */
    var SHOW_ALLOW_MESSAGES_FROM_COMMUNITY_BOX = "showAllowMessagesFromCommunityBox";

    /**
     * **Параметры**: photo_hash `String`  
     * **Ограничения**: —  
     * 
     * Вызывает окно c вызовом в приложении.
     * 
     * @see Вызовы в приложениях: https://vk.com/dev/api_calls
     */
    var CALL_USER = "callUser";

    /**
     * **Параметры**: —  
     * **Ограничения**: —  
     * 
     * Проверяет возможность использования Unity в браузере пользователя и предлагает
     * установить плеер Unity, если он отсутствует. В результате выполнения генерируются события:
     * - `onCheckUnitySupportSuccess` — Unity установлен в браузере и может быть использован.
     * - `onCheckUnitySupportFail` — Unity не установлен (показана заглушка с уведомлением о том,
     *     что игра требует Unity и ссылкой на установку).
     */
    var CHECK_UNITY_SUPPORT = "checkUnitySupport";

    /**
     * **Параметры**: —  
     * **Ограничения**: —  
     * 
     * Проверяет возможность использования Flash в браузере пользователя и предлагает установить
     * Flash-плеер, если он отсутствует. В результате выполнения генерируются события:
     * - `onCheckFlashSupportSuccess` — Flash установлен в браузере и может быть использован.
     * - `onCheckFlashSupportFail` — Flash не установлен (показана заглушка с уведомлением о том,
     *     что игра требует Flash и ссылкой на установку).
     */
    var CHECK_FLASH_SUPPORT = "checkFlashSupport";

    /**
     * **Параметры**: item `String`, subscription_id `Int`  
     * **Ограничения**: —  
     * 
     * Открывает окно для покупки или отмены подписки в приложении. См. полное описание
     * метода: Диалоговое окно подписки.
     * 
     * Обратите внимание, при вызове этого метода вторым аргументом в `сallMethod` необходимо
     * передать `action` — действие, которое нужно совершить. Возможные значения:
     * - `create` — Приобрести подписку.
     * - `resume` — Возобновить подписку.
     * - `cancel` — Отменить подписку.
     * 
     * Пример:
     * ```
     * VK.callMethod('showSubscriptionBox', 'create', {item: 'subscription1'});
     * ```
     * @see Диалоговое окно подписки: https://vk.com/dev/subscriptions_dialog
     */
    var SHOW_SUBSCRIPTION_BOX = "showSubscriptionBox";

    /**
     * **Параметры**: type `String`, code `String`  
     * **Ограничения**: не чаще 1 раза в 30 секунд  
     * 
     * Выводит окно с предпросмотром виджета приложения сообщества и кнопкой для
     * подтверждения его установки. `type` — тип виджета (например, `text`),
     * `code` — код, который возвращает объект виджета.
     * 
     * Возвращает одно из следующих событий:
     * - `onAppWidgetPreviewFail` — Произошла ошибка (например, в `code` неверный синтаксис).
     * - `onAppWidgetPreviewCancel` — Установка виджета отменена пользователем. 
     * - `onAppWidgetPreviewSuccess` — Установка виджета подтверждена.
     * 
     * Пример:
     * ```
     * VK.callMethod('showAppWidgetPreviewBox', 'text', 'return {
     *    "title": "Цитата",
     *    "text": "Текст цитаты"
     * };');
     * ```
     * @see Виджеты сообществ: https://vk.com/dev/apps_widgets
     */
    var SHOW_APP_WIDGET_PREVIEW_BOX = "showAppWidgetPreviewBox";
}