package social.network;

import social.user.User;
import social.user.UserField;
import social.user.OnlineType;
import social.user.Sex;

/**
 * Парсер данных социальной сети.  
 * Используется для разбора данных, полученных от социальной сети.
 * Интерфейс позволяет стандартизировать все реализаций парсеров
 * и приведение их к общему виду. Это удобно и полезно.
 * 
 * **Обратите внимание**, что конкретная реализация парсера может
 * включать дополнительные методы разбора, специфичные только для
 * своей соц. сети. Если вам понадобятся специфичные методы,
 * используйте приведение к типу.
 */
@:dce
interface IParser
{
    /**
     * Прочитать данные пользователя.  
     * Интерпретирует полученные данные от API социальной сети и записывает их
     * в объект в стандартизированном для всех соц. сетей виде.
     * - Метод считывает только перечисленые в поле `fields` свойства.
     *   Остальные данные игнорируются, даже если они получены в ответе.
     * - Если `data` равен `null`, пользователь считается не существующим и объект
     *   `user` заполняется соответствующим образом.
     * - Вызов этого метода всегда обновляет свойство `social.user.User.dateUpdated`,
     *   устанавливая в него текущую дату на момент вызова.
     * @param data Полученные данные пользователя в ответе от социальной сети.
     * @param user Цель для записи данных.
     * @param fields Маска считываемых данных.
     */
    public function readUser(data:Dynamic, user:User, fields:UserFields):Void;

    /**
     * Прочитать имя пользователя.
     * @param data Объект данных, полученный от социальной сети.
     * @return Имя пользователя. Может быть `null`.
     */
    public function readUserFirstName(data:Dynamic):String;

    /**
     * Прочитать фамилию пользователя.
     * @param data Объект данных, полученный от социальной сети.
     * @return Фамилия пользователя. Может быть `null`.
     */
    public function readUserLastName(data:Dynamic):String;

    /**
     * Прочитать статус удаления или отсутствия пользователя в социальной сети.
     * @param data Объект данных, полученный от социальной сети.
     * @return Статус удаления или отсутствия. Не может быть `null`.
     */
    public function readUserDeleted(data:Dynamic):Bool;

    /**
     * Прочитать статус блокировки пользователя в социальной сети.
     * @param data Объект данных, полученный от социальной сети.
     * @return Статус блокировки пользователя. Не может быть `null`.
     */
    public function readUserBanned(data:Dynamic):Bool;

    /**
     * Прочитать URL адрес изображения пользователя в формате: `50x50`.
     * @param data Объект данных, полученный от социальной сети.
     * @return URL Адрес изображения пользователя `50x50`. Может быть `null`.
     */
    public function readUserPhoto50(data:Dynamic):String;

    /**
     * Прочитать URL адрес изображения пользователя в формате: `100x100`.
     * @param data Объект данных, полученный от социальной сети.
     * @return URL Адрес изображения пользователя `100x100`. Может быть `null`.
     */
    public function readUserPhoto100(data:Dynamic):String;

    /**
     * Прочитать URL адрес изображения пользователя в формате: `200x200`.
     * @param data Объект данных, полученный от социальной сети.
     * @return URL Адрес изображения пользователя `200x200`. Может быть `null`.
     */
    public function readUserPhoto200(data:Dynamic):String;

    /**
     * Прочитать URL адрес домашней страницы пользователя.
     * @param data Объект данных, полученный от социальной сети.
     * @return URL Адрес пользователя. Может быть `null`.
     */
    public function readUserHome(data:Dynamic):String;

    /**
     * Прочитать гендерный признак пользователя.
     * @param data Объект данных, полученный от социальной сети.
     * @return Гендерный признак пользователя. Не может быть `null`.
     */
    public function readUserSex(data:Dynamic):Sex;

    /**
     * Прочитать статус онлайна пользователя в социальной сети.
     * @param data Объект данных, полученный от социальной сети.
     * @return Статус онлайна. Не может быть `null`.
     */
    public function readUserOnline(data:Dynamic):OnlineType;

    /**
     * Получить текстовое представление объекта.
     * @return Возвращает текстовое представление этого экземпляра.
     */
    @:keep
    @:noCompletion
    public function toString():String;
}