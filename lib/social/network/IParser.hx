package social.network;

import social.user.User;
import social.user.UserField;
import social.user.OnlineType;
import social.user.Sex;

/**
 * Парсер данных социальной сети.  
 * Используется для:
 * - Явного предоставления ссылки (Haxe-типизированной) на экземпляр
 *   парсера: `social.network.INetwork.parser`. Иногда это может быть полезно.
 * - Описание общих методов, используемых всеми реализациями.
 * 
 * Конкретная реализация парсера социальной сети может содержать дополнительные,
 * специфичные методы и свойства. Используйте приведение к типу, если нужно.
 */
@:dce
interface IParser
{
    /**
     * Прочитать данные пользователя.  
     * Интерпретирует полученные данные от API социальной сети и записывает их
     * в объект в стандартизированном для всех соц. сетей виде.
     * - Метод считывает только перечисленые в поле `fields` свойства.
     *   Остальные данные игнорируются, даже если они получены в ответе.
     * - Если `data` равен `null`, пользователь считается не существующим и объект
     *   `user` заполняется соответствующим образом.
     * - Вызов этого метода всегда обновляет свойство `social.user.User.dateUpdated`,
     *   устанавливая в него текущую дату на момент вызова.
     * @param data Полученные данные пользователя в ответе от социальной сети.
     * @param user Цель для записи данных.
     * @param fields Маска считываемых данных.
     */
    public function readUser(data:Dynamic, user:User, fields:UserFields):Void;

    /**
     * Прочитать статус онлайна пользователя.  
     * Интерпретирует статус онлайна пользователя в стандартизированном библиотекой виде.
     * @param data Данные пользователя, полученные от социальной сети.
     * @return Статус онлайна.
     */
    public function readUserOnline(data:Dynamic):OnlineType;

    /**
     * Прочитать статус бана пользователя.  
     * Интерпретирует статус блокировки пользователя в стандартизированном библиотекой виде.
     * @param data Данные пользователя, полученные от социальной сети.
     * @return Статус блокировки пользователя.
     */
    public function readUserBanned(data:Dynamic):Bool;

    /**
     * Прочитать статус удалённого пользователя.  
     * Интерпретирует статус отсутствия пользователя в стандартизированном библиотекой виде.
     * @param data Данные пользователя, полученные от социальной сети.
     * @return Статус отсутствия пользователя.
     */
    public function readUserDeleted(data:Dynamic):Bool;

    /**
     * Прочитать гендерный признак пользователя.  
     * Интерпретирует пол пользователя в стандартизированном библиотекой виде.
     * @param data Данные пользователя, полученные от социальной сети.
     * @return Гендерный признак пользователя.
     */
    public function readUserSex(data:Dynamic):Sex;

    /**
     * Получить текстовое представление объекта.
     * @return Возвращает текстовое представление этого экземпляра.
     */
    @:keep
    @:noCompletion
    public function toString():String;
}