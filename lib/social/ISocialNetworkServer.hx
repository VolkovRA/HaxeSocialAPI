package social;

import haxe.DynamicAccess;
import js.lib.Error;
import loader.Balancer;
import social.task.IGetUsersTask;
import social.task.IGetFriendsTask;

/**
 * API Интерфейс социальной сети для серверного приложения. (NodeJS)
 * 
 * Суть этого интерфейса в том, чтобы инкапсулировать и абстрагировать
 * параметры и методы различных соц. сетей, на сколько это возможно.
 * Это позволяет упростить работу и интеграцию с ними.
 * 
 * Интерфейс предназначен для использования на серверной стороне.
 * Специфические API конкретных соц. сетей могут быть доступны в 
 * реализующих их классах, если обобщить их не представляется возможным.
 * 
 * Общий принцип работы с интерфейсом такой:
 * 1. Вы создаёте реализацию интерфейса конкретной социальной сети.
 * 2. Настройте её.
 * 3. Вызываете методы или создаёте задачи: `ITask` для обращения к API.
 */
interface ISocialNetworkServer extends ISocialNetwork
{
    //////////////////
    //   СВОЙСТВА   //
    //////////////////

    /**
     * Секретный ключ приложения.
     * 
     * Необходим для проверки авторизации пользователей на сервере.
     * Этот ключ выдаётся приложению социальной сетью и используется
     * приложением на серверной стороне для проверки входящих запросов.
     * 
     * По умолчанию: `null`
     */
    public var secretKey:String;

    /**
     * Сервисный ключ доступа.
     * 
     * Некоторые методы API социальной сети могут требовать этот ключ.
     * Этот ключ выдаётся приложению социальной сетью и используется на
     * серверной стороне для отправки запросов к API соц. сети.
     * 
     * По умолчанию: `null`
     */
    public var serviceKey:String;



    ////////////////
    //   МЕТОДЫ   //
    ////////////////

    /**
     * Проверка авторизации пользователя.
     * - Метод возвращает `true`, если переданный пользователь и его ключ
     *   успешно проходят проверку на авторизацию.
     * - Метод генерирует исключение `SocialError`, если вызывается не в
     *   серверном режиме `NodeJS`.
     * 
     * Требования:
     *   1. Указанный `appID`.
     *   2. Указанный `secret`.
     *   3. Приложение запущено в серверном режиме `NodeJS`.
     * 
     * @param sid ID Пользователя в соц. сети.
     * @param key Ключ, которым представился пользователь.
     * @return Возвращает `true`, если пользователь тот, кем представился.
     * @see Документация: https://vk.com/dev/apps_init?f=3.%20auth_key
     */
    public function userCheckAuth(sid:SID, key:String):Bool;
}