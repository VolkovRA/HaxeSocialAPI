package social;

import haxe.DynamicAccess;
import js.lib.Error;
import loader.Balancer;
import social.task.IGetUsersTask;
import social.task.IGetFriendsTask;

/**
 * API Интерфейс социальной сети.
 * 
 * Суть этого интерфейса в том, чтобы инкапсулировать и абстрагировать
 * параметры и методы различных соц. сетей, на сколько это возможно.
 * Это позволяет упростить работу и интеграцию с ними.
 * 
 * Библиотека предназначена для использования на клиентской стороне.
 * Специфические API конкретных соц. сетей могут быть доступны в 
 * реализующих их классах, если обобщить их не представляется возможным.
 * 
 * Общий принцип работы с интерфейсом такой:
 * 1. Вы создаёте реализацию интерфейса конкретной социальной сети.
 * 2. Настраиваете и инициализируете её.
 * 3. Вызываете методы или создаёте задачи: `ITask` для обращения к API.
 * 
 * @see Документация VK: https://vk.com/dev/manuals
 */
interface ISocialNetwork 
{
    //////////////////
    //   СВОЙСТВА   //
    //////////////////

    /**
     * Тип социальной сети.
     * 
     * Уникальный идентификатор типа социальной сети.
     * 
     * Не может быть `null`
     */
    public var type(default, null):SocialNetworkType;

    /**
     * Название социальной сети. (Английский)
     * 
     * Не может быть `null`
     */
    public var title(default, null):String;

    /**
     * Статус инициализации.
     * 
     * Равен `true`, если этот интерфейс API был проинициализирован и
     * готов к работе.
     * 
     * По умолчанию: `false`
     */
    public var isInit(default, null):Bool;

    /**
     * Балансировщик запросов к API.
     * 
     * У каждой социальной сети есть собственные ограничения на количество
     * запросов в секунду. Этот балансировщик настроен по умолчанию для
     * каждой соц. сети. Доступ предоставлен для большего контроля.
     * 
     * Не может быть `null`.
     */
    public var balancer(default, null):Balancer;

    /**
     * ID Приложения.
     * 
     * Это уникальный идентификатор данного приложения в социальной сети.
     * 
     * По умолчанию: `null`
     */
    public var appID:String;

    /**
     * Ключ доступа для вызова методов API.
     * 
     * Используется для авторизации запроса на стороне социальной сети.
     * Для клиентских приложений ключ доступа передаётся в параметрах iframe.
     * 
     * По умолчанию: `null`
     */
    public var token:String;

    /**
     * Общее количество попыток запросов к API.
     * 
     * Это значение используется некоторыми задачами по умолчанию.
     * Задаёт общее количество попыток запроса api до получения
     * валидного ответа. Между невалидными запросами колбеки не
     * вызываются.
     * 
     * По умолчанию: `3` (Всего 3 запроса)
     */
    public var requestRepeatTry:Int;



    ////////////////
    //   МЕТОДЫ   //
    ////////////////

    /**
     * Инициализировать API.
     * 
     * Некоторые интерфейсы могут требовать предварительной инициализации.
     * Если таковой не требуется, переданный колбек `onComplete` вызывается
     * мгновенно.
     * 
     * @param onComplete Обратный вызов завершения инициализации.
     */
    public function init(onComplete:Error->Void = null):Void;

    /**
     * Загрузить данные пользователей.
     * @param users Список загружаемых пользователей.
     * @param fields Запрашиваемые поля. Если `null` - используются поля по умолчанию. (См. `IGetUsersTask.fields`)
     * @param onComplete Колбек завершения запроса.
     * @param onProgress Колбек прогресса загрузки.
     * @param priority Приоритет запроса.
     * @return Задача запроса данных пользователей.
     */
    public function getUsers(   users:Array<SocialUser>,
                                fields:SocialUserFields = null,
                                onComplete:IGetUsersTask->Void = null,
                                onProgress:IGetUsersTask->DynamicAccess<SocialUser>->Void = null,
                                priority:Int = 0
    ):IGetUsersTask;

    /**
     * Получить список друзей пользователя.
     * @param user ID Пользователя, список друзей которого нужно получить.
     * @param onComplete Колбек завершения выполнения запроса.
     * @param priority Приоритет запроса.
     * @return Задача запроса списка друзей.
     */
    public function getFriends( user:SID,
                                onComplete:IGetFriendsTask->Void = null,
                                priority:Int = 0
    ):IGetFriendsTask;

    /**
     * Получить текстовое представление интерфейса.
     * @return Возвращает текстовое представление объекта.
     */
    @:keep
    public function toString():String;



    ////////////////////
    //   РАЗРЕШЕНИЯ   //
    ////////////////////

    /**
     * Разрешение на доступ к списку друзей.
     */
    public var permissionFriends(get, never):Bool;
}