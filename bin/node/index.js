// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var Main = function() { };
Main.main = function() {
	Main.social.token = "4664b0a8889e4a876c7fa6326aa973721fd54c80cf44aeb2debaa2d61cadef9223be12f6c69d734ee595f";
	Main.social.init({ callback : Main.onInit});
};
Main.onInit = function(error) {
	console.log("src/Main.hx:35:","Init completed!");
	if(error != null) {
		console.log("src/Main.hx:37:",error);
		return;
	}
	Main.social.getFriends("94",function(task) {
		if(task.error != null) {
			console.log("src/Main.hx:43:",task.error);
			return;
		}
		console.log("src/Main.hx:46:","Friends:");
		console.log("src/Main.hx:47:",task.users);
	},10);
	Main.social.getUsers([{ id : "98"},{ id : "1718726"},{ id : "551229537"},{ id : "1"},{ id : "5513242495"}],null,function(task) {
		if(task.error != null) {
			console.log("src/Main.hx:58:",task.error);
			return;
		}
		console.log("src/Main.hx:61:","Users:");
		console.log("src/Main.hx:62:",task.users);
	});
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var loader_Balancer = function(rps) {
	if(rps == null) {
		rps = 1;
	}
	this.length = 0;
	this.time = 0;
	this.interval = null;
	this.loaders = [];
	this.set_rps(rps);
};
loader_Balancer.onUpdate = function(b) {
	if((b.length === 0)) {
		if((b.interval !== null)) {
			global.clearInterval(b.interval);
			b.interval = null;
		}
		return;
	}
	var t = 1000 / b.rps;
	var ct = Date.now();
	var dt = ct - b.time;
	if(dt < t) {
		return;
	}
	var mt = Math.max(t + 100,200);
	var num = 0;
	if(dt > mt) {
		num = Math.floor(mt / t);
		if(num > b.length) {
			num = b.length;
		}
		b.time = ct;
	} else {
		num = Math.floor(dt / t);
		if(num > b.length) {
			num = b.length;
		}
		b.time += num * t;
	}
	var len = b.loaders.length;
	var i = 0;
	var j = 0;
	while(i < len) {
		if((b.loaders[i] === null)) {
			++i;
			continue;
		}
		b.loaders[j] = b.loaders[i];
		++i;
		++j;
	}
	if((i !== j)) {
		b.loaders.length = j;
	}
	b.loaders.sort(loader_Balancer.compare);
	var arr = new Array(num);
	i = num;
	while(i-- > 0) {
		arr[i] = b.loaders[i];
		b.loaders[i] = null;
	}
	b.length -= num;
	while(num-- > 0) if((arr[num].state === 5) && (arr[num].balancer === b)) {
		arr[num].loadStart();
	}
};
loader_Balancer.compare = function(x,y) {
	if(x.priority > y.priority) {
		return -1;
	}
	if(x.priority < y.priority) {
		return 1;
	}
	return 0;
};
loader_Balancer.prototype = {
	set_rps: function(value) {
		if(value > 0) {
			if((value === this.rps)) {
				return value;
			}
			this.rps = value;
			if((this.interval === null) && this.length > 0) {
				this.interval = global.setInterval(loader_Balancer.onUpdate,100,this);
			}
		} else {
			if((this.rps === 0)) {
				return value;
			}
			this.rps = 0;
			if((this.interval !== null)) {
				global.clearInterval(this.interval);
				this.interval = null;
			}
		}
		return value;
	}
	,flush: function() {
		var i = 0;
		var arr = this.loaders;
		var len = arr.length;
		this.loaders = [];
		this.time = Date.now();
		this.length = 0;
		if((this.interval !== null)) {
			global.clearInterval(this.interval);
			this.interval = null;
		}
		while(i < len) {
			var l = arr[i++];
			if((l !== null) && (l.state === 5) && (l.balancer === this)) {
				l.loadStart();
			}
		}
	}
	,clear: function() {
		var i = 0;
		var arr = this.loaders;
		var len = arr.length;
		this.loaders = [];
		this.length = 0;
		if((this.interval !== null)) {
			global.clearInterval(this.interval);
			this.interval = null;
		}
		while(i < len) {
			var l = arr[i++];
			if((l === null) || (l.state !== 5)) {
				continue;
			}
			l.close();
		}
	}
	,add: function(loader) {
		this.length++;
		this.loaders.push(loader);
		if((this.interval === null) && this.rps > 0) {
			this.interval = global.setInterval(loader_Balancer.onUpdate,100,this);
		}
	}
	,remove: function(loader) {
		var i = 0;
		var len = this.loaders.length;
		while(i < len) {
			if((this.loaders[i] === loader)) {
				this.length--;
				this.loaders[i] = null;
				return;
			}
			++i;
		}
	}
	,toString: function() {
		return "[Balancer length=" + this.length + " rps=" + this.rps + "]";
	}
};
var loader_Request = function(url) {
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.timeout = 30000;
	this.data = null;
	this.headers = null;
	this.method = "GET";
	this.url = url;
};
loader_Request.prototype = {
	toString: function() {
		return "[Request " + this.method + " " + this.url + "]";
	}
};
loader_Balancer.INTERVAL_UPDATE = 100;
Main.main();
})({});
